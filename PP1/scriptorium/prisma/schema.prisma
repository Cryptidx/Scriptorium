// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model Template {
  id           Int       @id @default(autoincrement())
  ownerId      Int       // Foreign key to User
  owner        User      @relation(fields: [ownerId], references: [id])

  forkedFromId Int?      // Nullable foreign key to reference another Template's ID; check in backend logic

  code         String    // File path to the code saved on the server
  language     String
  title        String
  explanation  String
  tags         String   // JSON field for tags, for SQLite
  blogs        Blog[]

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

// ROLE TYPES: "USER", "SYS_ADMIN"

model User {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String    @unique
  password    String
  phoneNumber String 
  role        String    @default("USER") // Store as a String instead of Enum, 
  avatar      String    @default("uploads/default-avatar.png") // Default avatar path
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  blogs       Blog[]    // One user can create many blogs
  comments    Comment[] // One user can make many comments
  templates   Template[] // One user can create many templates

}


model Blog{
  // things specific to blog 
  id Int @id @default(autoincrement())
  title String 
  description String
  tag String
  // a blog can have many templates, or no templates
  templates Template[] 

  // shared things 
  flagged Boolean @default(false) // make sense
 

  // one author to many blogs 
  // the creator is the current user 
  authorId Int
  author User @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now()) // sensibel
  comments Comment[]  // make sense
  upvotes Int // make sense 
  downvotes Int // make sense

}

model Comment{
  id      Int @id @default(autoincrement())
  blogId  Int
  flagged Boolean @default(false)
  description String

  // one author to many blogs 
  authorId Int
  author User @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  blog        Blog       @relation(fields: [blogId], references: [id])
  parentId    Int?       // For subcomments, nullable for top-level comments
  parent      Comment?   @relation("Subcomments", fields: [parentId], references: [id])
  subcomments Comment[]  @relation("Subcomments")

  upvotes Int
  downvotes Int
}

model Report {
  id           Int      @id @default(autoincrement())
  contentId    Int      // ID of the reported content (Blog or Comment)
  contentType  String   // Type of content: "BLOG" or "COMMENT"
  explanation  String   // Additional explanation provided by the user

  authorId     Int      // Foreign key to the User model for the reporting user
  author       User     @relation(fields: [authorId], references: [id])

  createdAt    DateTime @default(now()) // Timestamp of when the report was created
}